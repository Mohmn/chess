How can one design a chess program?

The scheme I propose mostly involves the pieces on the board governing their own movement, and communicating with other pieces on the board. This is a challenging problem, because the game should determine what's a legal move, but this scheme should be able to deal with the complexity. :) This is going to be kind of rough, because I'm thinking through this, but I haven't tried it.

I'm going to talk about interfaces for pieces. If you were to do this in C++, an abstract class would be the way to implement it. Java has a separate interface type category.

I could imagine the movement logic existing within each Piece class. I can also imagine that the Board could function as a means to find individual pieces, and a means for pieces to query individual, or sets of pieces about their positions, and whether they are blocking a move, or can block or attack a Piece. It can also be used to broadcast status messages. When a Piece is to be removed, the Board can do that. I'm going to think of the Board as an "environment" in which the pieces exist, and as an interface between the players and pieces. The Board could contain references to both the white and black "sets," but it should be possible to reference both sets as one set for some operations. Each Piece should have a reference to the Board so they can access the sets of pieces. The Board can use the Visitor Pattern to call a method in all pieces, to deliver status messages, or collect results, and return them to a Piece, if it has requested information.

In this scheme I'm proposing, the Board can be used to find pieces that each player wants to move. Each Piece could have its own identifier that relates to each piece each player can see. When there's an attempt to move a Piece, it could report back whether the move succeeded or not (whether it was legal).

The reason I say you can have the movement logic inside each Piece is that each one is going to have coordinates on the virtual board anyway, and it should know what its full range of movement is. It can do a bounds check on its own moves, since the size of the board is known. Plus, each Piece is capable of making queries to the Board about other pieces, when it is searching for legal moves.

Re. each Piece's interface, it should be able to reveal the Piece's identifier, position on the board, and what set its in (white or black). Of course, it should contain methods for movement, indicating whether a move succeeded. It should respond to queries that will show whether the Piece is blocking a path of movement, whether it is able to block a proposed path of movement, whether it is able to capture a piece, whether it can attack the King on a proposed move, receive notifications that the King in its set is in check, and whether a player's turn has passed, after they have moved a Piece.

The message that a player's "turn has passed" would be used to clear state from status messages from the previous turn, which I will discuss below.

All pieces should be able to broadcast whether a Piece is attacking the King, after it has been moved.

When a player tries to move a Piece, that Piece can communicate with the other pieces in its "set" to find out if the player is trying to have it occupy a space already occupied by one of its own set (which is an illegal move), or it is being blocked by a Piece in either set (meaning that another Piece is in its path, and so the Piece's maximum range of movement is limited by it).

The King and the Rook are special cases, since you can rook a King only when they are in a certain configuration on the virtual board. Maybe both the Rook and the King should have a "rook" method, so that if the conditions are legal, the player can execute a rook maneuver, and the Rook and the King will move accordingly.

Also, the King can only move if where it moves does not lead it into an attack. So every Piece should be able to respond to a "can attack" query, where the King can ask all opposing pieces if they will be in an attack position if it moves to candidate coordinates (this is a version of a "pointInLine" query, which I get to below). If any respond that they can attack the position, the King cannot move to it.

Each Piece should be able to establish its own range of movement on the virtual board, based on its current position, and then be able to check if any other pieces (white and black) are obstructing a path of movement that a player has chosen, by transmitting the path of movement to other pieces, so they can see whether their position is within the path's range (I could imagine establishing a predicate in the interface for "pointInLine", where "point" is a Piece's coordinate on the virtual board, and "line" is the proposed path of movement for another Piece).

The Knight and the Pawn are also special cases.

The Knight uses offsets to move, so it will need to check where it's moving at its possible offsets, and if a piece is occupying a square where it can move, the Knight will need to check which side the other piece is on (white or black) to see if a possible move is legal.

The Pawn can only move forward, or can't move at all if there's a piece in front of it, and can only move forward diagonally by one square if an opposing Piece is adjacent on a diagonal. It also has a special case where it can make a capture move if an opposing Pawn moves forward an initial 2 squares, and ends up adjacent, and to the left or right of it. This is called an En passant

capture, and it can only do it on the next move. So, it would be good to have an interface for pawns that enables a Pawn to announce it has moved an initial "two squares" to opposing pawns.

Also, in the versions of chess I've played, pawns are "promoted" if they are able to reach the opposite side of the board. According to Rules of Chess: Pawns FAQ

, they can be promoted to a Queen, a Knight, a Rook, or a Bishop. This could easily be accomplished. When a Pawn reaches the opposite side, it could notify the Board, which would remove the Pawn, and substitute a type of Piece of the player's choosing.

The situation of "check" must be dealt with. In this case, the attacking Piece must be removed by an opposing Piece, or it must be blocked by an opposing Piece, or the King must be moved. After each Piece is moved, it could query the position of the opposing King, and it can verify for itself, accounting for blocking pieces, whether it is attacking the King, by iterating through possible paths of movement, within the legal range for the Piece's type. If it is in an attack position, it should broadcast a message to the Board, which will notify the players, indicating the King is checked, and broadcast a message to all opposing pieces that the King is "checked," revealing its own location, and path of attack. This message would prompt the other pieces to determine if they are able to remove or block the attacking Piece.

If a Piece cannot remove the attacking Piece, or block it, it must indicate that all attempts to move it are illegal, if there's an attempt to move it. Or, if it can remove the other Piece, or block it, it must only respond positively to moving to remove or block. These restrictions should be removed if a Piece receives a "turn has passed" message, indicating that the King is no longer in check.

Finally, checkmate would have to be detected, where the King is being attacked, with no means for any of the pieces in its set to remove or block the attacking piece, and all of its moves are illegal. In this case, the King would ask each Piece in its set whether it "can remove," or "can block," so that the King can determine whether it is mated or not. If it is, it could communicate its status to the Board, and the Board could declare "Checkmate" to the players.
